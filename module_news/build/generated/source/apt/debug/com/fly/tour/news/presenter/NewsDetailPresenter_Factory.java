// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.fly.tour.news.presenter;

import android.content.Context;
import com.fly.tour.news.contract.NewsDetailContract;
import com.fly.tour.news.model.NewsDetailModel;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class NewsDetailPresenter_Factory implements Factory<NewsDetailPresenter> {
  private final Provider<Context> contextProvider;

  private final Provider<NewsDetailContract.View> viewProvider;

  private final Provider<NewsDetailModel> modelProvider;

  public NewsDetailPresenter_Factory(
      Provider<Context> contextProvider,
      Provider<NewsDetailContract.View> viewProvider,
      Provider<NewsDetailModel> modelProvider) {
    this.contextProvider = contextProvider;
    this.viewProvider = viewProvider;
    this.modelProvider = modelProvider;
  }

  @Override
  public NewsDetailPresenter get() {
    return new NewsDetailPresenter(contextProvider.get(), viewProvider.get(), modelProvider.get());
  }

  public static Factory<NewsDetailPresenter> create(
      Provider<Context> contextProvider,
      Provider<NewsDetailContract.View> viewProvider,
      Provider<NewsDetailModel> modelProvider) {
    return new NewsDetailPresenter_Factory(contextProvider, viewProvider, modelProvider);
  }
}
