// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.fly.tour.news.presenter;

import android.content.Context;
import com.fly.tour.db.entity.NewsDetail;
import com.fly.tour.news.contract.NewsListContract;
import com.fly.tour.news.model.NewsListModel;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class NewsListPresenter_Factory implements Factory<NewsListPresenter> {
  private final Provider<Context> contextProvider;

  private final Provider<NewsListContract.View<NewsDetail>> viewProvider;

  private final Provider<NewsListModel> modelProvider;

  public NewsListPresenter_Factory(
      Provider<Context> contextProvider,
      Provider<NewsListContract.View<NewsDetail>> viewProvider,
      Provider<NewsListModel> modelProvider) {
    this.contextProvider = contextProvider;
    this.viewProvider = viewProvider;
    this.modelProvider = modelProvider;
  }

  @Override
  public NewsListPresenter get() {
    return new NewsListPresenter(contextProvider.get(), viewProvider.get(), modelProvider.get());
  }

  public static Factory<NewsListPresenter> create(
      Provider<Context> contextProvider,
      Provider<NewsListContract.View<NewsDetail>> viewProvider,
      Provider<NewsListModel> modelProvider) {
    return new NewsListPresenter_Factory(contextProvider, viewProvider, modelProvider);
  }
}
