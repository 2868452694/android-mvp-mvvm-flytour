// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.fly.tour.news.inject.component;

import com.fly.tour.common.base.BaseMvpActivity_MembersInjector;
import com.fly.tour.db.dao.NewsDetailDao;
import com.fly.tour.news.NewsDetailActivity;
import com.fly.tour.news.inject.module.NewsDetailModule;
import com.fly.tour.news.model.NewsDetailModel;
import com.fly.tour.news.presenter.NewsDetailPresenter;
import dagger.internal.Preconditions;

public final class DaggerNewsDetailComponent implements NewsDetailComponent {
  private NewsDetailModule newsDetailModule;

  private DaggerNewsDetailComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  private NewsDetailDao getNewsDetailDao() {
    return new NewsDetailDao(
        Preconditions.checkNotNull(
            newsDetailModule.providerContext(),
            "Cannot return null from a non-@Nullable @Provides method"));
  }

  private NewsDetailModel getNewsDetailModel() {
    return new NewsDetailModel(
        Preconditions.checkNotNull(
            newsDetailModule.providerContext(),
            "Cannot return null from a non-@Nullable @Provides method"),
        getNewsDetailDao());
  }

  private NewsDetailPresenter getNewsDetailPresenter() {
    return new NewsDetailPresenter(
        Preconditions.checkNotNull(
            newsDetailModule.providerContext(),
            "Cannot return null from a non-@Nullable @Provides method"),
        Preconditions.checkNotNull(
            newsDetailModule.providerNewsDetailView(),
            "Cannot return null from a non-@Nullable @Provides method"),
        getNewsDetailModel());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.newsDetailModule = builder.newsDetailModule;
  }

  @Override
  public void inject(NewsDetailActivity activity) {
    injectNewsDetailActivity(activity);
  }

  private NewsDetailActivity injectNewsDetailActivity(NewsDetailActivity instance) {
    BaseMvpActivity_MembersInjector.injectMPresenter(instance, getNewsDetailPresenter());
    return instance;
  }

  public static final class Builder {
    private NewsDetailModule newsDetailModule;

    private Builder() {}

    public NewsDetailComponent build() {
      if (newsDetailModule == null) {
        throw new IllegalStateException(NewsDetailModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerNewsDetailComponent(this);
    }

    public Builder newsDetailModule(NewsDetailModule newsDetailModule) {
      this.newsDetailModule = Preconditions.checkNotNull(newsDetailModule);
      return this;
    }
  }
}
