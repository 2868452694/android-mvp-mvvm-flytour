// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.fly.tour.news.inject.component;

import com.fly.tour.common.base.BaseMvpFragment_MembersInjector;
import com.fly.tour.db.dao.NewsDetailDao;
import com.fly.tour.news.fragment.NewsListFragment;
import com.fly.tour.news.inject.module.NewsListModule;
import com.fly.tour.news.model.NewsListModel;
import com.fly.tour.news.presenter.NewsListPresenter;
import dagger.internal.Preconditions;

public final class DaggerNewsListComponent implements NewsListComponent {
  private NewsListModule newsListModule;

  private DaggerNewsListComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  private NewsDetailDao getNewsDetailDao() {
    return new NewsDetailDao(
        Preconditions.checkNotNull(
            newsListModule.providerContext(),
            "Cannot return null from a non-@Nullable @Provides method"));
  }

  private NewsListModel getNewsListModel() {
    return new NewsListModel(
        Preconditions.checkNotNull(
            newsListModule.providerContext(),
            "Cannot return null from a non-@Nullable @Provides method"),
        getNewsDetailDao());
  }

  private NewsListPresenter getNewsListPresenter() {
    return new NewsListPresenter(
        Preconditions.checkNotNull(
            newsListModule.providerContext(),
            "Cannot return null from a non-@Nullable @Provides method"),
        Preconditions.checkNotNull(
            newsListModule.providerNewsDetailView(),
            "Cannot return null from a non-@Nullable @Provides method"),
        getNewsListModel());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.newsListModule = builder.newsListModule;
  }

  @Override
  public void inject(NewsListFragment listFragment) {
    injectNewsListFragment(listFragment);
  }

  private NewsListFragment injectNewsListFragment(NewsListFragment instance) {
    BaseMvpFragment_MembersInjector.injectMPresenter(instance, getNewsListPresenter());
    return instance;
  }

  public static final class Builder {
    private NewsListModule newsListModule;

    private Builder() {}

    public NewsListComponent build() {
      if (newsListModule == null) {
        throw new IllegalStateException(NewsListModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerNewsListComponent(this);
    }

    public Builder newsListModule(NewsListModule newsListModule) {
      this.newsListModule = Preconditions.checkNotNull(newsListModule);
      return this;
    }
  }
}
