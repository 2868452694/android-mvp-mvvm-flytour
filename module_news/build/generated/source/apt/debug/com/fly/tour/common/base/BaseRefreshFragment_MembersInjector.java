// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.fly.tour.common.base;

import com.fly.tour.common.mvp.BaseModel;
import com.fly.tour.common.mvp.BaseRefreshPresenter;
import com.fly.tour.common.mvp.BaseRefreshView;
import dagger.MembersInjector;
import javax.inject.Provider;

public final class BaseRefreshFragment_MembersInjector<
        M extends BaseModel,
        V extends BaseRefreshView<T>,
        P extends BaseRefreshPresenter<M, V, T>,
        T>
    implements MembersInjector<BaseRefreshFragment<M, V, P, T>> {
  private final Provider<P> mPresenterProvider;

  public BaseRefreshFragment_MembersInjector(Provider<P> mPresenterProvider) {
    this.mPresenterProvider = mPresenterProvider;
  }

  public static <
          M extends BaseModel,
          V extends BaseRefreshView<T>,
          P extends BaseRefreshPresenter<M, V, T>,
          T>
      MembersInjector<BaseRefreshFragment<M, V, P, T>> create(Provider<P> mPresenterProvider) {
    return new BaseRefreshFragment_MembersInjector<M, V, P, T>(mPresenterProvider);
  }

  @Override
  public void injectMembers(BaseRefreshFragment<M, V, P, T> instance) {
    BaseMvpFragment_MembersInjector.injectMPresenter(instance, mPresenterProvider.get());
  }
}
